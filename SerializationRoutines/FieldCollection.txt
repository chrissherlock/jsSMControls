public static void AddToStream(this IEvaluate Target, Stream mem)
{
    try
    {
        if (((Target != null) && (Target.Count != 0)) && (mem != null))
        {
            IEnumerator<KeyValuePair<string, object>> enumerator;
            Encoding encoding = Encoding.UTF8;
            byte[] bytes = encoding.GetBytes(Target.Count.ToString().PadRight(6, ' '));
            mem.Write(bytes, 0, bytes.Length);
            try
            {
                enumerator = Target.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    KeyValuePair<string, object> current = enumerator.Current;
                    string key = current.Key;
                    bytes = encoding.GetBytes(key.Length.ToString().PadRight(6, ' '));
                    mem.Write(bytes, 0, bytes.Length);
                    bytes = encoding.GetBytes(key);
                    mem.Write(bytes, 0, bytes.Length);
                    bytes = null;
                    string s = null;
                    char ch = 'I';
                    if ((current.Value == null) || Information.IsDBNull(RuntimeHelpers.GetObjectValue(current.Value)))
                    {
                        s = string.Empty;
                    }
                    else if (current.Value is string)
                    {
                        ch = 'J';
                        s = (string) current.Value;
                    }
                    else if (current.Value is Enum)
                    {
                        s = Conversions.ToInteger(current.Value).ToString();
                    }
                    else if (current.Value is int)
                    {
                        s = current.Value.ToString();
                    }
                    else if (current.Value is DateTime)
                    {
                        s = "~DT~" + Conversions.ToDate(current.Value).ToOADate().ToString(NeutralNumericFormat.Value);
                    }
                    else if (current.Value is bool)
                    {
                        s = Conversions.ToString(current.Value);
                    }
                    else if ((current.Value is double) || (current.Value is decimal))
                    {
                        s = current.Value.ToString();
                    }
                    else if (current.Value is IEvaluate)
                    {
                        ch = 'C';
                    }
                    else if (current.Value is short)
                    {
                        s = current.Value.ToString();
                    }
                    else if (current.Value is long)
                    {
                        s = current.Value.ToString();
                    }
                    else
                    {
                        Settings.Tracing.WriteLine("FieldCollectionSerialization.ToString: Unknown Type = " + current.Value.GetType().Name);
                        ch = 'J';
                        s = current.Value.ToString();
                    }
                    mem.Write(encoding.GetBytes(Conversions.ToString(ch)), 0, encoding.GetBytes(Conversions.ToString(ch)).Length);
                    if (ch != 'C')
                    {
                        string str3;
                        if (bytes == null)
                        {
                            bytes = encoding.GetBytes(s);
                        }
                        int length = bytes.Length;
                        if (ch == 'I')
                        {
                            str3 = length.ToString().PadRight(6, ' ');
                        }
                        else
                        {
                            str3 = length.ToString("X").PadLeft(8, '0');
                        }
                        mem.Write(encoding.GetBytes(str3), 0, encoding.GetBytes(str3).Length);
                        if (length > 0)
                        {
                            mem.Write(bytes, 0, length);
                        }
                    }
                    else
                    {
                        byte[] buffer = null;
                        using (MemoryStream stream = new MemoryStream())
                        {
                            ((IEvaluate) current.Value).AddToStream(mem);
                            buffer = stream.ToArray();
                        }
                        int num2 = buffer.Length;
                        string str4 = num2.ToString("X").PadLeft(8, '0');
                        mem.Write(encoding.GetBytes(str4), 0, encoding.GetBytes(str4).Length);
                        mem.Write(buffer, 0, buffer.Length);
                    }
                }
            }
            finally
            {
                if (enumerator != null)
                {
                    enumerator.Dispose();
                }
            }
        }
    }
    catch (ApplicationException exception1)
    {
        ProjectData.SetProjectError(exception1);
        ApplicationException exception = exception1;
        Settings.Tracing.WriteLine("FieldCollectionSerialization.ToString - Error : " + exception.Message);
        ProjectData.ClearProjectError();
    }
}

